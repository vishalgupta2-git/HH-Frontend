import HomeHeader from '@/components/Home/HomeHeader';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import axios from 'axios';
import { getEndpointUrl, getAuthHeaders } from '@/constants/ApiConfig';
import { LinearGradient } from 'expo-linear-gradient';
import React, { useEffect, useState } from 'react';
import { Alert, AppState, FlatList, Image, Modal, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, TouchableWithoutFeedback, View } from 'react-native';
import { Audio } from 'expo-av';
import YoutubePlayer from 'react-native-youtube-iframe';
import { useLanguage } from '@/contexts/LanguageContext';

interface MediaFile {
  avld: string;
  Type: string;
  Classification: string;
  VideoName: string;
  Link: string;
  Deity: string;
  Language: string;
  Artists: string;
  Duration: string;
  MediaType: string;
  CreatedAt: string;
  famous?: boolean; // Optional boolean field for famous content
}



function extractYouTubeId(url: string): string | null {
  let videoId: string | null = null;
  const shortMatch = url.match(/youtu\.be\/([\w-]+)/);
  if (shortMatch) videoId = shortMatch[1];
  const watchMatch = url.match(/[?&]v=([\w-]+)/);
  if (watchMatch) videoId = watchMatch[1];
  const embedMatch = url.match(/embed\/([\w-]+)/);
  if (embedMatch) videoId = embedMatch[1];
  return videoId;
}

export default function AudioVideoScreen() {
  const { isHindi, isBangla, isKannada, isPunjabi, isTamil, isTelugu, currentLanguage } = useLanguage();
  
  // Debug: Log current language
  console.log('ЁЯФН [AUDIO-VIDEO] Current language:', currentLanguage);
  
  // Helper function to get translation
  const getTranslation = (translations: any) => {
    const result = currentLanguage === 'hindi' ? (translations.hi || translations.en) :
           currentLanguage === 'bangla' ? (translations.bangla || translations.en) :
           currentLanguage === 'kannada' ? (translations.kannada || translations.en) :
           currentLanguage === 'punjabi' ? (translations.punjabi || translations.en) :
           currentLanguage === 'tamil' ? (translations.tamil || translations.en) :
           currentLanguage === 'telugu' ? (translations.telugu || translations.en) :
           translations.en;
    
    // Debug: Log translation result
    console.log('ЁЯФН [AUDIO-VIDEO] Translation for', Object.keys(translations)[0], ':', result);
    return result;
  };
  
  const translations = {
    searchPlaceholder: { 
      en: 'Search for music, artists, or deities...', 
      hi: 'рд╕рдВрдЧреАрдд, рдХрд▓рд╛рдХрд╛рд░ рдпрд╛ рджреЗрд╡рддрд╛рдУрдВ рдХреА рдЦреЛрдЬ рдХрд░реЗрдВ...',
      bangla: 'рж╕ржВржЧрзАржд, рж╢рж┐рж▓рзНржкрзА ржмрж╛ ржжрзЗржмрждрж╛ржжрзЗрж░ ржЦрзБржБржЬрзБржи...',
      kannada: 'р▓╕р▓Вр▓Чр│Ар▓д, р▓Хр▓▓р▓╛р▓╡р▓┐р▓жр▓░р│Б р▓Ер▓ер▓╡р▓╛ р▓жр│Зр▓╡р▓др│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓╣р│Бр▓бр│Бр▓Хр▓┐...',
      punjabi: 'ри╕рй░риЧрйАрид, риХри▓ри╛риХри╛ри░ риЬри╛риВ рижрйЗри╡ридри┐риЖриВ рижрйА риЦрйЛриЬ риХри░рйЛ...',
      tamil: 'роЗроЪрпИ, роХро▓рпИроЮро░рпНроХро│рпН роЕро▓рпНро▓родрпБ родрпЖропрпНро╡роЩрпНроХро│рпИродрпН родрпЗроЯрпБроЩрпНроХро│рпН...',
      telugu: 'р░╕р░Вр░Чр▒Ар░др░В, р░Хр░│р░╛р░Хр░╛р░░р▒Бр░▓р▒Б р░▓р▒Зр░жр░╛ р░жр▒Зр░╡р░др░▓р░ир▒Б р░╡р▒Жр░др░Хр░Вр░бр░┐...'
    },
    audio: { 
      en: 'Audio', 
      hi: 'рдСрдбрд┐рдпреЛ',
      bangla: 'ржЕржбрж┐ржУ',
      kannada: 'р▓Жр▓бр▓┐р▓пр│Л',
      punjabi: 'риЖрибрйАриУ',
      tamil: 'роЖроЯро┐ропрпЛ',
      telugu: 'р░Жр░бр░┐р░пр▒Л'
    },
    video: { 
      en: 'Video', 
      hi: 'рд╡реАрдбрд┐рдпреЛ',
      bangla: 'ржнрж┐ржбрж┐ржУ',
      kannada: 'р▓╡р│Ар▓бр▓┐р▓пр│К',
      punjabi: 'ри╡рйАрибрйАриУ',
      tamil: 'ро╡рпАроЯро┐ропрпЛ',
      telugu: 'р░╡р▒Ар░бр░┐р░пр▒Л'
    },
    stopMusic: { 
      en: 'тП╣я╕П Stop Music', 
      hi: 'тП╣я╕П рд╕рдВрдЧреАрдд рдмрдВрдж рдХрд░реЗрдВ',
      bangla: 'тП╣я╕П рж╕ржВржЧрзАржд ржмржирзНржз ржХрж░рзБржи',
      kannada: 'тП╣я╕П р▓╕р▓Вр▓Чр│Ар▓др▓╡р▓ир│Нр▓ир│Б р▓ир▓┐р▓▓р│Нр▓▓р▓┐р▓╕р▓┐',
      punjabi: 'тП╣я╕П ри╕рй░риЧрйАрид римрй░риж риХри░рйЛ',
      tamil: 'тП╣я╕П роЗроЪрпИропрпИ роиро┐ро▒рпБродрпНродрпБ',
      telugu: 'тП╣я╕П р░╕р░Вр░Чр▒Ар░др░╛р░ир▒Нр░ир░┐ р░Жр░кр░Вр░бр░┐'
    },
    loading: { 
      en: 'Loading...', 
      hi: 'рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...',
      bangla: 'рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...',
      kannada: 'р▓▓р│Лр▓бр│Н р▓Жр▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...',
      punjabi: 'ри▓рйЛриб ри╣рйЛ ри░ри┐ри╣ри╛ ри╣рйИ...',
      tamil: 'ро▓рпЛроЯрпН роЪрпЖропрпНроХро┐ро▒родрпБ...',
      telugu: 'р░▓р▒Лр░бр▒Н р░Ер░╡р▒Бр░др▒Лр░Вр░жр░┐...'
    },
    noMediaFound: { 
      en: 'No media files found. Please check the database.', 
      hi: 'рдХреЛрдИ рдореАрдбрд┐рдпрд╛ рдлрд╛рдЗрд▓ рдирд╣реАрдВ рдорд┐рд▓реАред рдХреГрдкрдпрд╛ рдбреЗрдЯрд╛рдмреЗрд╕ рдЬрд╛рдВрдЪреЗрдВред',
      bangla: 'ржХрзЛржирзЛ ржорж┐ржбрж┐ржпрж╝рж╛ ржлрж╛ржЗрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржбрзЗржЯрж╛ржмрзЗрж╕ ржЪрзЗржХ ржХрж░рзБржиред',
      kannada: 'р▓ор│Ар▓бр▓┐р▓пр▓╛ р▓лр│Ир▓▓р│НтАМр▓Чр▓│р│Б р▓Хр▓Вр▓бр│Бр▓мр▓Вр▓жр▓┐р▓▓р│Нр▓▓ред р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓бр│Зр▓Яр▓╛р▓мр│Зр▓╕р│Н р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓┐ред',
      punjabi: 'риХрйЛриИ риорйАрибрйАриЖ рилри╛риИри▓ риири╣рйАриВ риори┐ри▓рйАред риХри┐ри░рикри╛ риХри░риХрйЗ рибрйЗриЯри╛римрйЗри╕ риЪрйИриХ риХри░рйЛред',
      tamil: 'роОроирпНрод роорпАроЯро┐ропро╛ роХрпЛрокрпНрокрпБроХро│рпБроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. родропро╡рпБроЪрпЖропрпНродрпБ родро░ро╡рпБродрпНродро│родрпНродрпИ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпНред',
      telugu: 'р░ор▒Ар░бр░┐р░пр░╛ р░лр▒Ир░│р▒Нр░▓р▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░мр░бр░▓р▒Зр░жр▒Б. р░жр░пр░Ър▒Зр░╕р░┐ р░бр▒Зр░Яр░╛р░мр▒Зр░╕р▒НтАМр░ир▒Б р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░Вр░бр░┐ред'
    },
    noMatches: { 
      en: 'No media files match your current filters. Try adjusting your search or filters.', 
      hi: 'рдЖрдкрдХреЗ рд╡рд░реНрддрдорд╛рди рдлрд┐рд▓реНрдЯрд░ рд╕реЗ рдХреЛрдИ рдореАрдбрд┐рдпрд╛ рдлрд╛рдЗрд▓ рдореЗрд▓ рдирд╣реАрдВ рдЦрд╛рддреАред рдЕрдкрдиреА рдЦреЛрдЬ рдпрд╛ рдлрд┐рд▓реНрдЯрд░ рдХреЛ рд╕рдорд╛рдпреЛрдЬрд┐рдд рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред',
      bangla: 'ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржлрж┐рж▓рзНржЯрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ ржХрзЛржирзЛ ржорж┐ржбрж┐ржпрж╝рж╛ ржлрж╛ржЗрж▓ ржорж┐рж▓ржЫрзЗ ржирж╛ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ ржЕржирзБрж╕ржирзНржзрж╛ржи ржмрж╛ ржлрж┐рж▓рзНржЯрж╛рж░ рж╕рж╛ржоржЮрзНржЬрж╕рзНржп ржХрж░рзБржиред',
      kannada: 'р▓ир▓┐р▓ор│Нр▓о р▓кр│Нр▓░р▓╕р│Нр▓др│Бр▓д р▓лр▓┐р▓▓р│Нр▓Яр▓░р│НтАМр▓Чр▓│р▓┐р▓Чр│Ж р▓╣р│Кр▓Вр▓жр▓╛р▓гр▓┐р▓Хр│Жр▓пр▓╛р▓Чр│Бр▓╡ р▓ор│Ар▓бр▓┐р▓пр▓╛ р▓лр│Ир▓▓р│НтАМр▓Чр▓│р▓┐р▓▓р│Нр▓▓ред р▓ир▓┐р▓ор│Нр▓о р▓╣р│Бр▓бр│Бр▓Хр▓╛р▓Я р▓Ер▓ер▓╡р▓╛ р▓лр▓┐р▓▓р│Нр▓Яр▓░р│НтАМр▓Чр▓│р▓ир│Нр▓ир│Б р▓╣р│Кр▓Вр▓жр▓┐р▓╕р▓▓р│Б р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐ред',
      punjabi: 'ридрйБри╣ри╛рибрйЗ риорйМриЬрйВрижри╛ рилри┐ри▓риЯри░ри╛риВ риири╛ри▓ риХрйЛриИ риорйАрибрйАриЖ рилри╛риИри▓ риорйИриЪ риири╣рйАриВ ри╣рйБрй░рижрйАред риЖрикригрйА риЦрйЛриЬ риЬри╛риВ рилри┐ри▓риЯри░ри╛риВ риирйВрй░ риЕриирйБриХрйВри▓ римригри╛риЙриг рижрйА риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛред',
      tamil: 'роЙроЩрпНроХро│рпН родро▒рпНрокрпЛродрпИроп ро╡роЯро┐роХроЯрпНроЯро┐роХро│рпБроЯройрпН рокрпКро░рпБроирпНродрпБроорпН роорпАроЯро┐ропро╛ роХрпЛрокрпНрокрпБроХро│рпН роЗро▓рпНро▓рпИ. роЙроЩрпНроХро│рпН родрпЗроЯро▓рпН роЕро▓рпНро▓родрпБ ро╡роЯро┐роХроЯрпНроЯро┐роХро│рпИ роЪро░ро┐роЪрпЖропрпНроп роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпНред',
      telugu: 'р░ор▒А р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░лр░┐р░▓р▒Нр░Яр░░р▒НтАМр░▓р░др▒Л р░╕р░░р░┐р░кр▒Лр░пр▒З р░ор▒Ар░бр░┐р░пр░╛ р░лр▒Ир░│р▒Нр░▓р▒Б р░▓р▒Зр░╡р▒Б. р░ор▒А р░╢р▒Лр░зр░и р░▓р▒Зр░жр░╛ р░лр░┐р░▓р▒Нр░Яр░░р▒НтАМр░▓р░ир▒Б р░╕р░░р▒Нр░жр▒Бр░мр░╛р░Яр▒Б р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐ред'
    },
    loadingAudio: { 
      en: 'Loading audio...', 
      hi: 'рдСрдбрд┐рдпреЛ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...',
      bangla: 'ржЕржбрж┐ржУ рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...',
      kannada: 'р▓Жр▓бр▓┐р▓пр│Л р▓▓р│Лр▓бр│Н р▓Жр▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...',
      punjabi: 'риЖрибрйАриУ ри▓рйЛриб ри╣рйЛ ри░ри┐ри╣ри╛ ри╣рйИ...',
      tamil: 'роЖроЯро┐ропрпЛ ро▓рпЛроЯрпН роЪрпЖропрпНроХро┐ро▒родрпБ...',
      telugu: 'р░Жр░бр░┐р░пр▒Л р░▓р▒Лр░бр▒Н р░Ер░╡р▒Бр░др▒Лр░Вр░жр░┐...'
    },
    unsupportedMedia: { 
      en: 'Unsupported media type', 
      hi: 'рдЕрд╕рдорд░реНрдерд┐рдд рдореАрдбрд┐рдпрд╛ рдкреНрд░рдХрд╛рд░',
      bangla: 'ржЕрж╕ржорж░рзНржерж┐ржд ржорж┐ржбрж┐ржпрж╝рж╛ ржЯрж╛ржЗржк',
      kannada: 'р▓мр│Жр▓Вр▓мр▓▓р▓┐р▓╕р▓ж р▓ор│Ар▓бр▓┐р▓пр▓╛ р▓кр│Нр▓░р▓Хр▓╛р▓░',
      punjabi: 'риЕри╕риори░риери┐рид риорйАрибрйАриЖ риХри┐ри╕рио',
      tamil: 'роЖродро░ро┐роХрпНроХрокрпНрокроЯро╛род роорпАроЯро┐ропро╛ ро╡роХрпИ',
      telugu: 'р░ор░жр▒Нр░жр░др▒Б р░▓р▒Зр░ир░┐ р░ор▒Ар░бр░┐р░пр░╛ р░░р░Хр░В'
    },
    by: { 
      en: 'by', 
      hi: 'рджреНрд╡рд╛рд░рд╛',
      bangla: 'ржжрзНржмрж╛рж░рж╛',
      kannada: 'р▓жр│Нр▓╡р▓╛р▓░р▓╛',
      punjabi: 'рижрйБриЖри░ри╛',
      tamil: 'роорпВро▓роорпН',
      telugu: 'р░жр▒Нр░╡р░╛р░░р░╛'
    },
    untitled: {
      en: 'Untitled',
      hi: 'рдмрд┐рдирд╛ рд╢реАрд░реНрд╖рдХ',
      bangla: 'рж╢рж┐рж░рзЛржирж╛ржорж╣рзАржи',
      kannada: 'р▓╢р│Ар▓░р│Нр▓╖р▓┐р▓Хр│Жр▓пр▓┐р▓▓р│Нр▓▓р▓ж',
      punjabi: 'ри╕ри┐ри░ри▓рйЗриЦ ри░ри╣ри┐рид',
      tamil: 'родро▓рпИрокрпНрокрпБ роЗро▓рпНро▓ро╛род',
      telugu: 'р░╢р▒Ар░░р▒Нр░╖р░┐р░Х р░▓р▒Зр░ир░┐'
    },
    error: {
      en: 'Error',
      hi: 'рддреНрд░реБрдЯрд┐',
      bangla: 'рждрзНрж░рзБржЯрж┐',
      kannada: 'р▓жр│Лр▓╖',
      punjabi: 'риЧри▓ридрйА',
      tamil: 'рокро┐ро┤рпИ',
      telugu: 'р░▓р▒Лр░кр░В'
    },
    failedToLoadAudio: {
      en: 'Failed to load audio file. Please try again.',
      hi: 'рдСрдбрд┐рдпреЛ рдлрд╛рдЗрд▓ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред',
      bangla: 'ржЕржбрж┐ржУ ржлрж╛ржЗрж▓ рж▓рзЛржб ржХрж░рждрзЗ ржмрзНржпрж░рзНржеред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
      kannada: 'р▓Жр▓бр▓┐р▓пр│Л р▓лр│Ир▓▓р│Н р▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓▓р│Б р▓╡р▓┐р▓лр▓▓р▓╡р▓╛р▓Чр▓┐р▓жр│Жред р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ор▓др│Нр▓др│Ж р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐ред',
      punjabi: 'риЖрибрйАриУ рилри╛риИри▓ ри▓рйЛриб риХри░рии ри╡ри┐рй▒риЪ риЕри╕рилри▓ред риХри┐ри░рикри╛ риХри░риХрйЗ рижрйБримри╛ри░ри╛ риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛред',
      tamil: 'роЖроЯро┐ропрпЛ роХрпЛрокрпНрокрпИ ро▓рпЛроЯрпН роЪрпЖропрпНроп роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИред родропро╡рпБроЪрпЖропрпНродрпБ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпНред',
      telugu: 'р░Жр░бр░┐р░пр▒Л р░лр▒Ир░▓р▒НтАМр░ир▒Б р░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░бр░Вр░▓р▒Л р░╡р░┐р░лр░▓р░ор▒Ир░Вр░жр░┐ред р░жр░пр░Ър▒Зр░╕р░┐ р░ор░│р▒Нр░▓р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐ред'
    },
    failedToPlayAudio: {
      en: 'Failed to play audio',
      hi: 'рдСрдбрд┐рдпреЛ рдЪрд▓рд╛рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓',
      bangla: 'ржЕржбрж┐ржУ ржЪрж╛рж▓рж╛рждрзЗ ржмрзНржпрж░рзНрже',
      kannada: 'р▓Жр▓бр▓┐р▓пр│Л р▓кр│Нр▓▓р│З р▓ор▓╛р▓бр▓▓р│Б р▓╡р▓┐р▓лр▓▓р▓╡р▓╛р▓Чр▓┐р▓жр│Ж',
      punjabi: 'риЖрибрйАриУ риЪри▓ри╛риЙриг ри╡ри┐рй▒риЪ риЕри╕рилри▓',
      tamil: 'роЖроЯро┐ропрпЛро╡рпИ роЗропроХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ',
      telugu: 'р░Жр░бр░┐р░пр▒Л р░кр▒Нр░▓р▒З р░Ър▒Зр░пр░бр░Вр░▓р▒Л р░╡р░┐р░лр░▓р░ор▒Ир░Вр░жр░┐'
    },
    failedToFetchMedia: {
      en: 'Failed to fetch media files',
      hi: 'рдореАрдбрд┐рдпрд╛ рдлрд╛рдЗрд▓реЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓',
      bangla: 'ржорж┐ржбрж┐ржпрж╝рж╛ ржлрж╛ржЗрж▓ ржЖржирждрзЗ ржмрзНржпрж░рзНрже',
      kannada: 'р▓ор│Ар▓бр▓┐р▓пр▓╛ р▓лр│Ир▓▓р│НтАМр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓бр│Жр▓пр▓▓р│Б р▓╡р▓┐р▓лр▓▓р▓╡р▓╛р▓Чр▓┐р▓жр│Ж',
      punjabi: 'риорйАрибрйАриЖ рилри╛риИри▓ри╛риВ ри▓ри┐риЖриЙриг ри╡ри┐рй▒риЪ риЕри╕рилри▓',
      tamil: 'роорпАроЯро┐ропро╛ роХрпЛрокрпНрокрпБроХро│рпИрокрпН рокрпЖро▒ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ',
      telugu: 'р░ор▒Ар░бр░┐р░пр░╛ р░лр▒Ир░│р▒Нр░▓р░ир▒Б р░кр▒Кр░Вр░жр░бр░Вр░▓р▒Л р░╡р░┐р░лр░▓р░ор▒Ир░Вр░жр░┐'
    },
    filterButtons: {
      all: { 
        en: 'All', 
        hi: 'рд╕рднреА',
        bangla: 'рж╕ржм',
        kannada: 'р▓Ор▓▓р│Нр▓▓р▓╛',
        punjabi: 'ри╕рин',
        tamil: 'роЕройрпИродрпНродрпБроорпН',
        telugu: 'р░Ер░ир▒Нр░ир▒А'
      },
      aarti: { 
        en: 'Aarti', 
        hi: 'рдЖрд░рддреА',
        bangla: 'ржЖрж░рждрж┐',
        kannada: 'р▓Жр▓░р▓др▓┐',
        punjabi: 'риЖри░ридрйА',
        tamil: 'роЖро░родрпНродро┐',
        telugu: 'р░Жр░░р░др░┐'
      },
      bhajan: { 
        en: 'Bhajan', 
        hi: 'рднрдЬрди',
        bangla: 'ржнржЬржи',
        kannada: 'р▓нр▓Ьр▓ир│Ж',
        punjabi: 'ринриЬрии',
        tamil: 'рокроЬройрпН',
        telugu: 'р░нр░Ьр░и'
      },
      chalisa: { 
        en: 'Chalisa', 
        hi: 'рдЪрд╛рд▓реАрд╕рд╛',
        bangla: 'ржЪрж╛рж▓рж┐рж╢рж╛',
        kannada: 'р▓Ър▓╛р▓▓р│Ар▓╕р▓╛',
        punjabi: 'риЪри╛ри▓рйАри╕ри╛',
        tamil: 'роЪро╛ро▓ро┐роЪро╛',
        telugu: 'р░Ър░╛р░▓р▒Ар░╕р░╛'
      },
      katha: { 
        en: 'Katha', 
        hi: 'рдХрдерд╛',
        bangla: 'ржХржерж╛',
        kannada: 'р▓Хр▓ер│Ж',
        punjabi: 'риХриери╛',
        tamil: 'роХродрпИ',
        telugu: 'р░Хр░е'
      },
      paath: { 
        en: 'Paath / Strotam', 
        hi: 'рдкрд╛рда / рд╕реНрддреЛрддреНрд░',
        bangla: 'ржкрж╛ржа / рж╕рзНрждрзЛрждрзНрж░',
        kannada: 'р▓кр▓╛р▓а / р▓╕р│Нр▓др│Лр▓др│Нр▓░',
        punjabi: 'рикри╛риа / ри╕ридрйЛридри░',
        tamil: 'рокро╛роЯроорпН / ро╕рпНродрпЛродрпНро░роорпН',
        telugu: 'р░кр░╛р░ар░В / р░╕р▒Нр░др▒Лр░др▒Нр░░р░В'
      },
      famous: { 
        en: 'Famous', 
        hi: 'рдкреНрд░рд╕рд┐рджреНрдз',
        bangla: 'ржмрж┐ржЦрзНржпрж╛ржд',
        kannada: 'р▓кр│Нр▓░р▓╕р▓┐р▓жр│Нр▓з',
        punjabi: 'рикрйНри░ри╕ри┐рй▒риз',
        tamil: 'рокро┐ро░рокро▓рооро╛рой',
        telugu: 'р░кр▒Нр░░р░╕р░┐р░жр▒Нр░з'
      }
    },
    deityNames: {
      brahma: { 
        en: 'Brahma Ji', 
        hi: 'рдмреНрд░рд╣реНрдорд╛ рдЬреА',
        bangla: 'ржмрзНрж░рж╣рзНржорж╛ ржЬрзА',
        kannada: 'р▓мр│Нр▓░р▓╣р│Нр▓о р▓Ьр▓┐',
        punjabi: 'римрйНри░ри╣риори╛ риЬрйА',
        tamil: 'рокро┐ро░роорпНрооро╛ роЬро┐',
        telugu: 'р░мр▒Нр░░р░╣р▒Нр░о р░Ьр▒А'
      },
      brihaspati: { 
        en: 'Brihaspati Dev', 
        hi: 'рдмреГрд╣рд╕реНрдкрддрд┐ рджреЗрд╡',
        bangla: 'ржмрзГрж╣рж╕рзНржкрждрж┐ ржжрзЗржм',
        kannada: 'р▓мр│Гр▓╣р▓╕р│Нр▓кр▓др▓┐ р▓жр│Зр▓╡',
        punjabi: 'римрйНри░ри┐ри╣ри╕рикридрйА рижрйЗри╡',
        tamil: 'рокро┐ро░ро╣ро╕рпНрокродро┐ родрпЗро╡рпН',
        telugu: 'р░мр▒Гр░╣р░╕р▒Нр░кр░др░┐ р░жр▒Зр░╡р▒Н'
      },
      durga: { 
        en: 'Durga Maa', 
        hi: 'рджреБрд░реНрдЧрд╛ рдорд╛рдВ',
        bangla: 'ржжрзБрж░рзНржЧрж╛ ржорж╛',
        kannada: 'р▓жр│Бр▓░р│Нр▓Чр▓╛ р▓ор▓╛',
        punjabi: 'рижрйБри░риЧри╛ риори╛риВ',
        tamil: 'родрпБро░рпНроХро╛ рооро╛',
        telugu: 'р░жр▒Бр░░р▒Нр░Чр░╛ р░ор░╛'
      },
      ganga: { 
        en: 'Ganga Maiya', 
        hi: 'рдЧрдВрдЧрд╛ рдореИрдпрд╛',
        bangla: 'ржЧржЩрзНржЧрж╛ ржорж╛ржЗржпрж╝рж╛',
        kannada: 'р▓Чр▓Вр▓Чр▓╛ р▓ор│Ир▓пр▓╛',
        punjabi: 'риЧрй░риЧри╛ риори╛риИриЖ',
        tamil: 'роХроЩрпНроХро╛ роорпИропро╛',
        telugu: 'р░Чр░Вр░Чр░╛ р░ор▒Ир░пр░╛'
      },
      khatuShyam: { 
        en: 'Khatu Shyam Ji', 
        hi: 'рдЦрд╛рдЯреВ рд╢реНрдпрд╛рдо рдЬреА',
        bangla: 'ржЦрж╛ржЯрзБ рж╢рзНржпрж╛ржо ржЬрзА',
        kannada: 'р▓Цр▓╛р▓Яр│Б р▓╢р│Нр▓пр▓╛р▓о р▓Ьр▓┐',
        punjabi: 'риЦри╛риЯрйВ ри╕ри╝ри┐риЖрио риЬрйА',
        tamil: 'роХро╛роЯрпНроЯрпБ ро╖рпНропро╛роорпН роЬро┐',
        telugu: 'р░Цр░╛р░Яр▒Б р░╢р▒Нр░пр░╛р░ор▒Н р░Ьр▒А'
      },
      lakshmi: { 
        en: 'Lakshmi Maa', 
        hi: 'рд▓рдХреНрд╖реНрдореА рдорд╛рдВ',
        bangla: 'рж▓ржХрзНрж╖рзНржорзА ржорж╛',
        kannada: 'р▓▓р▓Хр│Нр▓╖р│Нр▓ор│А р▓ор▓╛',
        punjabi: 'ри▓риХри╕ри╝риорйА риори╛риВ',
        tamil: 'ро▓роЯрпНроЪрпБрооро┐ рооро╛',
        telugu: 'р░▓р░Хр▒Нр░╖р▒Нр░ор▒А р░ор░╛'
      },
      kali: { 
        en: 'Maa Kali', 
        hi: 'рдорд╛рдВ рдХрд╛рд▓реА',
        bangla: 'ржорж╛ ржХрж╛рж▓рзА',
        kannada: 'р▓ор▓╛ р▓Хр▓╛р▓│р▓┐',
        punjabi: 'риори╛риВ риХри╛ри▓рйА',
        tamil: 'рооро╛ роХро╛ро│ро┐',
        telugu: 'р░ор░╛ р░Хр░╛р░│р░┐'
      },
      shiv: { 
        en: 'Mahadev Shiv Ji', 
        hi: 'рдорд╣рд╛рджреЗрд╡ рд╢рд┐рд╡ рдЬреА',
        bangla: 'ржорж╣рж╛ржжрзЗржм рж╢рж┐ржм ржЬрзА',
        kannada: 'р▓ор▓╣р▓╛р▓жр│Зр▓╡ р▓╢р▓┐р▓╡ р▓Ьр▓┐',
        punjabi: 'риори╣ри╛рижрйЗри╡ ри╕ри╝ри┐ри╡ риЬрйА',
        tamil: 'рооро╣ро╛родрпЗро╡рпН ро╖ро┐ро╡рпН роЬро┐',
        telugu: 'р░ор░╣р░╛р░жр▒Зр░╡р▒Н р░╢р░┐р░╡р▒Н р░Ьр▒А'
      },
      hanuman: { 
        en: 'Mahaveer Hanuman', 
        hi: 'рдорд╣рд╛рд╡реАрд░ рд╣рдиреБрдорд╛рди',
        bangla: 'ржорж╣рж╛ржмрзАрж░ рж╣ржирзБржорж╛ржи',
        kannada: 'р▓ор▓╣р▓╛р▓╡р│Ар▓░ р▓╣р▓ир│Бр▓ор▓╛р▓ир│Н',
        punjabi: 'риори╣ри╛ри╡рйАри░ ри╣риирйВриори╛рии',
        tamil: 'рооро╣ро╛ро╡рпАро░рпН ро╣ройрпБрооро╛ройрпН',
        telugu: 'р░ор░╣р░╛р░╡р▒Ар░░р▒Н р░╣р░ир▒Бр░ор░╛р░ир▒Н'
      },
      navgrah: { 
        en: 'Navgrah', 
        hi: 'рдирд╡рдЧреНрд░рд╣',
        bangla: 'ржиржмржЧрзНрж░рж╣',
        kannada: 'р▓ир▓╡р▓Чр│Нр▓░р▓╣',
        punjabi: 'риири╡риЧрйНри░ри╣',
        tamil: 'роиро╡роХрпНро░ро╣рпН',
        telugu: 'р░ир░╡р░Чр▒Нр░░р░╣р▒Н'
      },
      rahuKetu: { 
        en: 'Rahu Ketu', 
        hi: 'рд░рд╛рд╣реБ рдХреЗрддреБ',
        bangla: 'рж░рж╛рж╣рзБ ржХрзЗрждрзБ',
        kannada: 'р▓░р▓╛р▓╣р│Б р▓Хр│Зр▓др│Б',
        punjabi: 'ри░ри╛ри╣рйБ риХрйЗридрйБ',
        tamil: 'ро░ро╛роХрпБ роХрпЗродрпБ',
        telugu: 'р░░р░╛р░╣р▒Б р░Хр▒Зр░др▒Б'
      },
      saraswati: { 
        en: 'Saraswati Maa', 
        hi: 'рд╕рд░рд╕реНрд╡рддреА рдорд╛рдВ',
        bangla: 'рж╕рж░рж╕рзНржмрждрзА ржорж╛',
        kannada: 'р▓╕р▓░р▓╕р│Нр▓╡р▓др▓┐ р▓ор▓╛',
        punjabi: 'ри╕ри░ри╕ри╡ридрйА риори╛риВ',
        tamil: 'роЪро░ро╕рпНро╡родро┐ рооро╛',
        telugu: 'р░╕р░░р░╕р▒Нр░╡р░др░┐ р░ор░╛'
      },
      shani: { 
        en: 'Shani Dev', 
        hi: 'рд╢рдирд┐ рджреЗрд╡',
        bangla: 'рж╢ржирж┐ ржжрзЗржм',
        kannada: 'р▓╢р▓ир▓┐ р▓жр│Зр▓╡',
        punjabi: 'ри╕ри╝риирйА рижрйЗри╡',
        tamil: 'ро╖ройро┐ родрпЗро╡рпН',
        telugu: 'р░╢р░ир░┐ р░жр▒Зр░╡р▒Н'
      },
      krishna: { 
        en: 'Shri Krishna', 
        hi: 'рд╢реНрд░реА рдХреГрд╖реНрдг',
        bangla: 'рж╢рзНрж░рзА ржХрзГрж╖рзНржг',
        kannada: 'р▓╢р│Нр▓░р│А р▓Хр│Гр▓╖р│Нр▓г',
        punjabi: 'ри╕ри╝рйНри░рйА риХрйНри░ри┐ри╕ри╝рии',
        tamil: 'ро╕рпНро░рпА роХро┐ро░рпБро╖рпНрогро╛',
        telugu: 'р░╢р▒Нр░░р▒А р░Хр▒Гр░╖р▒Нр░г'
      },
      ram: { 
        en: 'Shri Ram', 
        hi: 'рд╢реНрд░реА рд░рд╛рдо',
        bangla: 'рж╢рзНрж░рзА рж░рж╛ржо',
        kannada: 'р▓╢р│Нр▓░р│А р▓░р▓╛р▓о',
        punjabi: 'ри╕ри╝рйНри░рйА ри░ри╛рио',
        tamil: 'ро╕рпНро░рпА ро░ро╛рооро╛',
        telugu: 'р░╢р▒Нр░░р▒А р░░р░╛р░ор▒Н'
      },
      ganesh: { 
        en: 'Vighnaharta Ganesh', 
        hi: 'рд╡рд┐рдШреНрдирд╣рд░реНрддрд╛ рдЧрдгреЗрд╢',
        bangla: 'ржмрж┐ржШрзНржирж╣рж░рзНрждрж╛ ржЧржгрзЗрж╢',
        kannada: 'р▓╡р▓┐р▓Шр│Нр▓ир▓╣р▓░р│Нр▓др▓╛ р▓Чр▓гр│Зр▓╢',
        punjabi: 'ри╡ри┐риШриири╣ри░ридри╛ риЧригрйЗри╕ри╝',
        tamil: 'ро╡ро┐роХрпНройро╣ро░рпНродро╛ роХрогрпЗро╖рпН',
        telugu: 'р░╡р░┐р░Шр▒Нр░ир░╣р░░р▒Нр░др░╛ р░Чр░гр▒Зр░╖р▒Н'
      },
      vishnu: { 
        en: 'Vishnu Bhagwan', 
        hi: 'рд╡рд┐рд╖реНрдгреБ рднрдЧрд╡рд╛рди',
        bangla: 'ржмрж┐рж╖рзНржгрзБ ржнржЧржмрж╛ржи',
        kannada: 'р▓╡р▓┐р▓╖р│Нр▓гр│Б р▓нр▓Чр▓╡р▓╛р▓ир│Н',
        punjabi: 'ри╡ри┐ри╕ри╝риирйВ ринриЧри╡ри╛рии',
        tamil: 'ро╡ро┐ро╖рпНрогрпБ рокроХро╡ро╛ройрпН',
        telugu: 'р░╡р░┐р░╖р▒Нр░гр▒Б р░нр░Чр░╡р░╛р░ир▒Н'
      }
    }
  };

  const [modalVisible, setModalVisible] = useState(false);
  const [currentMedia, setCurrentMedia] = useState<MediaFile | null>(null);
  const [mediaFiles, setMediaFiles] = useState<MediaFile[]>([]);
  const [loading, setLoading] = useState(true);
  const [youtubePlaying, setYoutubePlaying] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedDeity, setSelectedDeity] = useState<string | null>(null);
  const [selectedFilter, setSelectedFilter] = useState<string>('All');
  const [audioEnabled, setAudioEnabled] = useState(true);
  const [videoEnabled, setVideoEnabled] = useState(true);
  
  // Audio playback state
  const [sound, setSound] = useState<Audio.Sound | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [elapsedTime, setElapsedTime] = useState(0);
  const [audioDuration, setAudioDuration] = useState(0);
  const [currentlyPlaying, setCurrentlyPlaying] = useState<string | null>(null);

  useEffect(() => {
    // Configure audio session for background playback
    const configureAudioSession = async () => {
      try {
        await Audio.setAudioModeAsync({
          allowsRecordingIOS: false,
          staysActiveInBackground: true,
          playsInSilentModeIOS: true,
          shouldDuckAndroid: true,
          playThroughEarpieceAndroid: false,
        });
      } catch (error) {
        console.error('тЭМ Failed to configure audio session:', error);
      }
    };

    configureAudioSession();
    
    const fetchMedia = async () => {
      try {
        const url = getEndpointUrl('MEDIA_FILES');
        
        const res = await axios.get(url, {
          headers: getAuthHeaders()
        });
        
        if (Array.isArray(res.data)) {
          // Process the media files
          setMediaFiles(res.data || []);
        } else {
          console.log('ЁЯУ▒ [AUDIO-VIDEO] Response is not an array, actual type:', typeof res.data);
        }
      } catch (e: any) {
        console.error('тЭМ [AUDIO-VIDEO] Failed to fetch media files:', e.message);
        
        if (e.response) {
          console.error('тЭМ [AUDIO-VIDEO] Response status:', e.response.status);
        }
        
        Alert.alert(getTranslation(translations.failedToFetchMedia), e.response?.data?.error || e.message);
      } finally {
        setLoading(false);
      }
    };
    fetchMedia();
  }, []);

  // Handle app state changes for background audio
  useEffect(() => {
    const handleAppStateChange = (nextAppState: string) => {
      if (nextAppState === 'active') {
        // Resume audio if it was playing before going to background
        if (sound && isPlaying) {
          sound.playAsync();
        }
      }
      // Audio will continue playing in background due to staysActiveInBackground: true
    };

    const subscription = AppState.addEventListener('change', handleAppStateChange);
    return () => subscription?.remove();
  }, [sound, isPlaying]);



  // Timer effect to track elapsed time and detect song end
  useEffect(() => {
    let interval: ReturnType<typeof setInterval>;
    
    if (isPlaying && sound) {
      interval = setInterval(async () => {
        try {
          const status = await sound.getStatusAsync();
          if (status.isLoaded) {
            setElapsedTime(status.positionMillis || 0);
            setAudioDuration(status.durationMillis || 0);
            
            // Check if song has ended
            if (status.positionMillis && status.durationMillis && status.positionMillis >= status.durationMillis) {
              setIsPlaying(false);
              setElapsedTime(0);
              // Auto-play next song
              playNextSong();
            }
          }
        } catch (error) {
          console.error('тЭМ [AUDIO-VIDEO] Error getting audio status:', error);
        }
      }, 1000); // Update every second
    } else {
      setElapsedTime(0);
    }

    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [isPlaying, sound]);

  // Cleanup audio when component unmounts
  useEffect(() => {
    return () => {
      if (sound) {
        sound.unloadAsync();
      }
    };
  }, [sound]);

  const handlePlay = (media: MediaFile) => {
    if (media.Link && (media.Link.includes('youtube.com') || media.Link.includes('youtu.be'))) {
      setCurrentMedia(media);
      setModalVisible(true);
      setYoutubePlaying(true);
    } else if (media.MediaType === 'mp3') {
      // For MP3 files, play inline without opening modal
      if (currentMedia?.avld === media.avld && sound) {
        // If same audio is already loaded, toggle play/pause
        if (isPlaying) {
          pauseAudio();
        } else {
          playAudio();
        }
      } else {
        // Load new audio
        setCurrentMedia(media);
        loadAndPlayAudio(media);
      }
    }
  };

  const loadAndPlayAudio = async (media: MediaFile) => {
    try {
      setIsLoading(true);
      
      // Unload previous sound if exists
      if (sound) {
        await sound.unloadAsync();
        setSound(null);
        setIsPlaying(false);
      }
      
      // Get presigned URL from backend API
      const apiUrl = getEndpointUrl('S3_AUDIO_URL');
      const response = await axios.get(apiUrl, {
        params: { filename: media.Link },
        headers: getAuthHeaders()
      });
      
              if (response.data.success && response.data.presignedUrl) {
          const presignedUrl = response.data.presignedUrl;
        
        // Load the audio using the presigned URL
        const { sound: newSound } = await Audio.Sound.createAsync(
          { uri: presignedUrl },
          { shouldPlay: true } // Auto-play when loaded
        );
        
        // Get initial duration
        const status = await newSound.getStatusAsync();
        if (status.isLoaded) {
          setAudioDuration(status.durationMillis || 0);
        }
        
        setSound(newSound);
        setIsPlaying(true); // Set playing state to true
        setCurrentlyPlaying(media.avld);
        setIsLoading(false);
      } else {
        throw new Error('Failed to get presigned URL from API');
      }
      
    } catch (error) {
      console.error('тЭМ [AUDIO-VIDEO] Error loading MP3:', error);
      setIsLoading(false);
      Alert.alert(getTranslation(translations.error), getTranslation(translations.failedToLoadAudio));
    }
  };

  const playAudio = async () => {
    try {
      if (sound) {
        await sound.playAsync();
        setIsPlaying(true);
      }
    } catch (error) {
      console.error('тЭМ [AUDIO-VIDEO] Error playing audio:', error);
      Alert.alert(getTranslation(translations.error), getTranslation(translations.failedToPlayAudio));
    }
  };

  const pauseAudio = async () => {
    try {
      if (sound) {
        await sound.pauseAsync();
        setIsPlaying(false);
      }
    } catch (error) {
      console.error('тЭМ [AUDIO-VIDEO] Error pausing audio:', error);
    }
  };

  const stopAudio = async () => {
    try {
      if (sound) {
        await sound.stopAsync();
        setIsPlaying(false);
      }
    } catch (error) {
      console.error('тЭМ [AUDIO-VIDEO] Error stopping audio:', error);
    }
  };

  // Function to stop current music (for global music control)
  const stopCurrentMusic = async () => {
    try {
      if (sound) {
        const status = await sound.getStatusAsync();
        if (status.isLoaded) {
          await sound.stopAsync();
          await sound.unloadAsync();
        }
      }
      setSound(null);
      setIsPlaying(false);
      setCurrentlyPlaying(null);
      setCurrentMedia(null);
    } catch (error) {
      console.error('тЭМ [AUDIO-VIDEO] Error stopping current music:', error);
    }
  };

  const rewindAudio = async () => {
    try {
      if (sound) {
        const status = await sound.getStatusAsync();
        if (status.isLoaded) {
          const newPosition = Math.max(0, (status.positionMillis || 0) - 10000); // 10 seconds back
          await sound.setPositionAsync(newPosition);
        }
      }
    } catch (error) {
      console.error('тЭМ [AUDIO-VIDEO] Error rewinding audio:', error);
    }
  };

  const forwardAudio = async () => {
    try {
      if (sound) {
        const status = await sound.getStatusAsync();
        if (status.isLoaded) {
          const newPosition = Math.min((status.durationMillis || 0), (status.positionMillis || 0) + 10000); // 10 seconds forward
          await sound.setPositionAsync(newPosition);
        }
      }
    } catch (error) {
      console.error('тЭМ [AUDIO-VIDEO] Error forwarding audio:', error);
    }
  };

  const playPreviousSong = () => {
    // Get the current filtered list for navigation
    const currentFilteredList = getCurrentFilteredList();
    if (!currentFilteredList || currentFilteredList.length === 0) return;
    
    handlePreviousSong(currentFilteredList);
  };

  const playNextSong = () => {
    // Get the current filtered list for navigation
    const currentFilteredList = getCurrentFilteredList();
    if (!currentFilteredList || currentFilteredList.length === 0) return;
    
    handleNextSong(currentFilteredList);
  };

  // Helper function to get current filtered list
  const getCurrentFilteredList = () => {
    return mediaFiles
      .filter(media => !selectedDeity || media.Deity === selectedDeity)
      .filter(media => {
        // Filter by selected filter button
        if (selectedFilter === 'All') return true;
        if (selectedFilter === 'Famous') return media.famous === true;
        return media.Type === selectedFilter;
      })
      .filter(media => {
        // If both toggles are off, show nothing
        if (!audioEnabled && !videoEnabled) return false;
        // If only audio is enabled, show only audio items
        if (audioEnabled && !videoEnabled) return media.Classification === 'Audio';
        // If only video is enabled, show only video items
        if (!audioEnabled && videoEnabled) return media.Classification === 'Video';
        // If both are enabled, show both audio and video items
        return media.Classification === 'Audio' || media.Classification === 'Video';
      })
      .filter(media => {
        if (!searchQuery.trim()) return true;
        const q = searchQuery.trim().toLowerCase();
        return (
          (media.VideoName && media.VideoName.toLowerCase().includes(q)) ||
          (media.Artists && media.Artists.toLowerCase().includes(q)) ||
          (media.Deity && media.Deity.toLowerCase().includes(q)) ||
          (media.Language && media.Language.toLowerCase().includes(q)) ||
          (media.Type && media.Type.toLowerCase().includes(q))
        );
      })
      .sort((a, b) => {
        // Sort audio first, then video
        if (a.Classification === 'Audio' && b.Classification === 'Video') return -1;
        if (a.Classification === 'Video' && b.Classification === 'Audio') return 1;
        // If both are same type, sort by name
        return (a.VideoName || '').localeCompare(b.VideoName || '');
      });
  };

  const formatTime = (milliseconds: number): string => {
    const totalSeconds = Math.floor(milliseconds / 1000);
    const minutes = Math.floor(totalSeconds / 60);
    const seconds = totalSeconds % 60;
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  const handleSearchChange = (query: string) => {
    setSearchQuery(query);
  };

  const handleDeitySelect = (deity: string) => {
    const newDeity = selectedDeity === deity ? null : deity;
    setSelectedDeity(newDeity);
  };

  // Navigation functions for next/previous in filtered list (MP3 only)
  const getCurrentMediaIndex = (filteredList: MediaFile[]) => {
    if (!currentMedia) return -1;
    return filteredList.findIndex(media => media.avld === currentMedia.avld);
  };

  const handleNextSong = (filteredList: MediaFile[]) => {
    if (!currentMedia || filteredList.length === 0) return;
    
    // Get only MP3 files from the filtered list
    const mp3OnlyList = filteredList.filter(media => media.MediaType === 'mp3');
    if (mp3OnlyList.length === 0) return;
    
    const currentIndex = mp3OnlyList.findIndex(media => media.avld === currentMedia.avld);
    if (currentIndex === -1) return;
    
    const nextIndex = (currentIndex + 1) % mp3OnlyList.length;
    const nextMedia = mp3OnlyList[nextIndex];
    
    handlePlay(nextMedia);
  };

  const handlePreviousSong = (filteredList: MediaFile[]) => {
    if (!currentMedia || filteredList.length === 0) return;
    
    // Get only MP3 files from the filtered list
    const mp3OnlyList = filteredList.filter(media => media.MediaType === 'mp3');
    if (mp3OnlyList.length === 0) return;
    
    const currentIndex = mp3OnlyList.findIndex(media => media.avld === currentMedia.avld);
    if (currentIndex === -1) return;
    
    const previousIndex = currentIndex === 0 ? mp3OnlyList.length - 1 : currentIndex - 1;
    const previousMedia = mp3OnlyList[previousIndex];
    
    handlePlay(previousMedia);
  };

  const filterContent = (
    <View style={styles.filterContainer}>
      {/* Search Input */}
      <View style={styles.searchInputContainer}>
        <TextInput
          style={styles.searchInput}
          placeholder={getTranslation(translations.searchPlaceholder)}
          placeholderTextColor="#666"
          value={searchQuery}
          onChangeText={setSearchQuery}
        />
        <MaterialCommunityIcons 
          name="magnify" 
          size={20} 
          color="#666" 
          style={styles.searchIcon}
        />
      </View>
      
      <View style={styles.filterRow}>
        {/* Audio/Video Toggle Controls */}
        <View style={styles.toggleContainer}>
          {/* Audio Toggle */}
          <TouchableOpacity 
            style={styles.toggleItem}
            onPress={() => setAudioEnabled(!audioEnabled)}
          >
            <LinearGradient
              colors={audioEnabled ? ['#4CAF50', '#81C784'] : ['#E0E0E0', '#F5F5F5']}
              style={styles.toggleTrack}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 0 }}
            >
              <View
                style={[
                  styles.toggleThumb,
                  audioEnabled && styles.toggleThumbActive
                ]}
              />
            </LinearGradient>
            <Text style={styles.toggleLabel}>{getTranslation(translations.audio)}</Text>
          </TouchableOpacity>

          {/* Video Toggle */}
          <TouchableOpacity 
            style={styles.toggleItem}
            onPress={() => setVideoEnabled(!videoEnabled)}
          >
            <LinearGradient
              colors={videoEnabled ? ['#4CAF50', '#81C784'] : ['#E0E0E0', '#F5F5F5']}
              style={styles.toggleTrack}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 0 }}
            >
              <View
                style={[
                  styles.toggleThumb,
                  videoEnabled && styles.toggleThumbActive
                ]}
              />
            </LinearGradient>
            <Text style={styles.toggleLabel}>{getTranslation(translations.video)}</Text>
          </TouchableOpacity>
        </View>

        {/* Stop Music Button */}
        <TouchableOpacity 
          style={[
            styles.stopMusicButton,
            currentlyPlaying ? styles.stopMusicButtonActive : styles.stopMusicButtonDisabled
          ]}
          onPress={stopCurrentMusic}
          disabled={!currentlyPlaying}
        >
          <Text style={[
            styles.stopMusicButtonText,
            currentlyPlaying ? styles.stopMusicButtonTextActive : styles.stopMusicButtonTextDisabled
          ]}>{getTranslation(translations.stopMusic)}</Text>
        </TouchableOpacity>
      </View>
    </View>
  );

  return (
    <View style={styles.container}>
      <HomeHeader 
        searchPlaceholder={getTranslation(translations.searchPlaceholder)} 
        extraContent={filterContent} 
        showDailyPujaButton={false}
        onSearchChange={handleSearchChange}
        showSearchBar={false}
        showLanguageToggle={false}
      />
      
      {/* Deity Icons - Horizontal Scrollable */}
      <View style={styles.deityIconsContainer}>
        <ScrollView 
          horizontal 
          showsHorizontalScrollIndicator={false}
          contentContainerStyle={styles.deityIconsContent}
        >
          <TouchableOpacity 
            style={[
              styles.deityIconItem,
              selectedDeity === 'Brahma Ji' && styles.deityIconItemSelected
            ]}
            onPress={() => handleDeitySelect('Brahma Ji')}
          >
            <Image source={require('@/assets/images/temple/Brahma1.png')} style={styles.deityIconImage} resizeMode="contain" />
            <Text style={styles.deityIconLabel} numberOfLines={1}>{getTranslation(translations.deityNames.brahma)}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[
              styles.deityIconItem,
              selectedDeity === 'Brihaspati Dev' && styles.deityIconItemSelected
            ]}
            onPress={() => handleDeitySelect('Brihaspati Dev')}
          >
            <Image source={require('@/assets/images/temple/BrihaspatiIcon.png')} style={styles.deityIconImage} resizeMode="contain" />
            <Text style={styles.deityIconLabel}>{getTranslation(translations.deityNames.brihaspati)}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[
              styles.deityIconItem,
              selectedDeity === 'Durga Maa' && styles.deityIconItemSelected
            ]}
            onPress={() => handleDeitySelect('Durga Maa')}
          >
            <Image source={require('@/assets/images/temple/Durga1.png')} style={styles.deityIconImage} resizeMode="contain" />
            <Text style={styles.deityIconLabel}>{getTranslation(translations.deityNames.durga)}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[
              styles.deityIconItem,
              selectedDeity === 'Ganga Maiya' && styles.deityIconItemSelected
            ]}
            onPress={() => handleDeitySelect('Ganga Maiya')}
          >
            <Image source={require('@/assets/images/temple/gangaMaiyaaIcon.png')} style={styles.deityIconImage} resizeMode="contain" />
            <Text style={styles.deityIconLabel}>{getTranslation(translations.deityNames.ganga)}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[
              styles.deityIconItem,
              selectedDeity === 'Khatu Shyam Ji' && styles.deityIconItemSelected
            ]}
            onPress={() => handleDeitySelect('Khatu Shyam Ji')}
          >
            <Image source={require('@/assets/images/temple/KhatuShyamIcon.jpg')} style={styles.deityIconImage} resizeMode="contain" />
            <Text style={styles.deityIconLabel}>{getTranslation(translations.deityNames.khatuShyam)}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[
              styles.deityIconItem,
              selectedDeity === 'Lakshmi Maa' && styles.deityIconItemSelected
            ]}
            onPress={() => handleDeitySelect('Lakshmi Maa')}
          >
            <Image source={require('@/assets/images/temple/Lakshmi1.png')} style={styles.deityIconImage} resizeMode="contain" />
            <Text style={styles.deityIconLabel}>{getTranslation(translations.deityNames.lakshmi)}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[
              styles.deityIconItem,
              selectedDeity === 'Maa Kali' && styles.deityIconItemSelected
            ]}
            onPress={() => handleDeitySelect('Maa Kali')}
          >
            <Image source={require('@/assets/images/temple/maaKaliIcon.png')} style={styles.deityIconImage} resizeMode="contain" />
            <Text style={styles.deityIconLabel}>{getTranslation(translations.deityNames.kali)}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[
              styles.deityIconItem,
              selectedDeity === 'Mahadev Shiv Ji' && styles.deityIconItemSelected
            ]}
            onPress={() => handleDeitySelect('Mahadev Shiv Ji')}
          >
            <Image source={require('@/assets/images/temple/New folder/Shiv4.png')} style={styles.deityIconImage} resizeMode="contain" />
            <Text style={styles.deityIconLabel}>{getTranslation(translations.deityNames.shiv)}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[
              styles.deityIconItem,
              selectedDeity === 'Mahaveer Hanuman' && styles.deityIconItemSelected
            ]}
            onPress={() => handleDeitySelect('Mahaveer Hanuman')}
          >
            <Image source={require('@/assets/images/temple/Hanuman1.png')} style={styles.deityIconImage} resizeMode="contain" />
            <Text style={styles.deityIconLabel}>{getTranslation(translations.deityNames.hanuman)}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[
              styles.deityIconItem,
              selectedDeity === 'Navgrah' && styles.deityIconItemSelected
            ]}
            onPress={() => handleDeitySelect('Navgrah')}
          >
            <Image source={require('@/assets/images/temple/navgrahIcon.jpg')} style={styles.deityIconImage} resizeMode="contain" />
            <Text style={styles.deityIconLabel}>{getTranslation(translations.deityNames.navgrah)}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[
              styles.deityIconItem,
              selectedDeity === 'Rahu Ketu' && styles.deityIconItemSelected
            ]}
            onPress={() => handleDeitySelect('Rahu Ketu')}
          >
            <Image source={require('@/assets/images/temple/RahuKetuIcon.jpg')} style={styles.deityIconImage} resizeMode="contain" />
            <Text style={styles.deityIconLabel}>{getTranslation(translations.deityNames.rahuKetu)}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[
              styles.deityIconItem,
              selectedDeity === 'Saraswati Maa' && styles.deityIconItemSelected
            ]}
            onPress={() => handleDeitySelect('Saraswati Maa')}
          >
            <Image source={require('@/assets/images/temple/Saraswati1.png')} style={styles.deityIconImage} resizeMode="contain" />
            <Text style={styles.deityIconLabel}>{getTranslation(translations.deityNames.saraswati)}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[
              styles.deityIconItem,
              selectedDeity === 'Shani Dev' && styles.deityIconItemSelected
            ]}
            onPress={() => handleDeitySelect('Shani Dev')}
          >
            <Image source={require('@/assets/images/temple/shaniDevIcon.png')} style={styles.deityIconImage} resizeMode="contain" />
            <Text style={styles.deityIconLabel}>{getTranslation(translations.deityNames.shani)}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[
              styles.deityIconItem,
              selectedDeity === 'Shri Krishna' && styles.deityIconItemSelected
            ]}
            onPress={() => handleDeitySelect('Shri Krishna')}
          >
            <Image source={require('@/assets/images/temple/Krishna1.png')} style={styles.deityIconImage} resizeMode="contain" />
            <Text style={styles.deityIconLabel}>{getTranslation(translations.deityNames.krishna)}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[
              styles.deityIconItem,
              selectedDeity === 'Shri Ram' && styles.deityIconItemSelected
            ]}
            onPress={() => handleDeitySelect('Shri Ram')}
          >
            <Image source={require('@/assets/images/temple/Rama1.png')} style={styles.deityIconImage} resizeMode="contain" />
            <Text style={styles.deityIconLabel}>{getTranslation(translations.deityNames.ram)}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[
              styles.deityIconItem,
              selectedDeity === 'Vighnaharta Ganesh' && styles.deityIconItemSelected
            ]}
            onPress={() => handleDeitySelect('Vighnaharta Ganesh')}
          >
            <Image source={require('@/assets/images/temple/Ganesha1.png')} style={styles.deityIconImage} resizeMode="contain" />
            <Text style={styles.deityIconLabel}>{getTranslation(translations.deityNames.ganesh)}</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[
              styles.deityIconItem,
              selectedDeity === 'Vishnu Bhagwan' && styles.deityIconItemSelected
            ]}
            onPress={() => handleDeitySelect('Vishnu Bhagwan')}
          >
            <Image source={require('@/assets/images/temple/VishnuIcon.png')} style={styles.deityIconImage} resizeMode="contain" />
            <Text style={styles.deityIconLabel}>{getTranslation(translations.deityNames.vishnu)}</Text>
          </TouchableOpacity>
        </ScrollView>
      </View>
      
      {/* Filter Buttons Row */}
      <View style={styles.filterButtonsContainer}>
        <ScrollView
          horizontal
          showsHorizontalScrollIndicator={false}
          contentContainerStyle={styles.filterButtonsContent}
        >
          {[
            { key: 'All', label: getTranslation(translations.filterButtons.all) },
            { key: 'Aarti', label: getTranslation(translations.filterButtons.aarti) },
            { key: 'Bhajan', label: getTranslation(translations.filterButtons.bhajan) },
            { key: 'Chalisa', label: getTranslation(translations.filterButtons.chalisa) },
            { key: 'Katha', label: getTranslation(translations.filterButtons.katha) },
            { key: 'Paath / Strotam', label: getTranslation(translations.filterButtons.paath) },
            { key: 'Famous', label: getTranslation(translations.filterButtons.famous) }
          ].map((filter) => (
            <TouchableOpacity
              key={filter.key}
              style={[
                styles.filterButton,
                selectedFilter === filter.key && styles.filterButtonActive
              ]}
              onPress={() => setSelectedFilter(filter.key)}
            >
              <Text style={[
                styles.filterButtonText,
                selectedFilter === filter.key && styles.filterButtonTextActive
              ]}>
                {filter.label}
              </Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
      </View>
      
      {/* Media List */}
      <ScrollView style={styles.content}>
         {loading ? (
           <Text>{getTranslation(translations.loading)}</Text>
         ) : (
           <>
             {mediaFiles.length === 0 && (
               <Text style={{ color: '#999', textAlign: 'center', marginTop: 20 }}>
                 {getTranslation(translations.noMediaFound)}
               </Text>
             )}
             {(() => {
               
               // Create filtered media list for navigation
               const filteredMedia = mediaFiles
                 .filter(media => !selectedDeity || media.Deity === selectedDeity)
                 .filter(media => {
                   // Filter by selected filter button
                   if (selectedFilter === 'All') return true;
                   if (selectedFilter === 'Famous') return media.famous === true;
                   return media.Type === selectedFilter;
                 })
                 .filter(media => {
                   // If both toggles are off, show nothing
                   if (!audioEnabled && !videoEnabled) return false;
                   // If only audio is enabled, show only audio items
                   if (audioEnabled && !videoEnabled) return media.Classification === 'Audio';
                   // If only video is enabled, show only video items
                   if (!audioEnabled && videoEnabled) return media.Classification === 'Video';
                   // If both are enabled, show both audio and video items
                   return media.Classification === 'Audio' || media.Classification === 'Video';
                 })
                 .filter(media => {
                   if (!searchQuery.trim()) return true;
                   const q = searchQuery.trim().toLowerCase();
                   return (
                     (media.VideoName && media.VideoName.toLowerCase().includes(q)) ||
                     (media.Artists && media.Artists.toLowerCase().includes(q)) ||
                     (media.Deity && media.Deity.toLowerCase().includes(q)) ||
                     (media.Language && media.Language.toLowerCase().includes(q)) ||
                     (media.Type && media.Type.toLowerCase().includes(q))
                   );
                 })
                 .sort((a, b) => {
                   // Sort audio first, then video
                   if (a.Classification === 'Audio' && b.Classification === 'Video') return -1;
                   if (a.Classification === 'Video' && b.Classification === 'Audio') return 1;
                   // If both are same type, sort by name
                   return (a.VideoName || '').localeCompare(b.VideoName || '');
                 });
               
               if (filteredMedia.length === 0) {
                 return (
                   <Text style={{ color: '#999', textAlign: 'center', marginTop: 20 }}>
                     {getTranslation(translations.noMatches)}
                   </Text>
                 );
               }
               
               return filteredMedia.map((media, idx) => {
                 return (
                   <TouchableOpacity
                     key={media.Link || idx}
                     style={[
                       styles.mediaTile,
                       media.Classification === 'Audio' && styles.audioTile,
                       media.Classification === 'Video' && styles.videoTile
                     ]}
                     onPress={() => handlePlay(media)}
                   >
                     {/* Audio/Video Icon with Type and Language */}
                     <View style={styles.mediaIconContainer}>
                       {media.Classification === 'Audio' ? (
                         <MaterialCommunityIcons name="music-note" size={20} color="#FF6A00" />
                       ) : (
                         <MaterialCommunityIcons name="video" size={20} color="#FF6A00" />
                       )}
                       <Text style={styles.mediaIconType}>{media.Type}</Text>
                       <Text style={styles.mediaIconLanguage}>{media.Language}</Text>
                     </View>
                     
                     {/* Media Content */}
                     <View style={styles.mediaContent}>
                       <Text style={styles.mediaTitle}>{media.VideoName || getTranslation(translations.untitled)}</Text>
                       <Text style={styles.mediaType}>
                         {media.Deity ? media.Deity : ''}
                       </Text>
                       {(media.Duration || media.Artists) && (
                         <Text style={styles.mediaDetails}>
                           {media.Duration ? media.Duration : ''}
                           {media.Duration && media.Artists ? ' | ' : ''}
                           {media.Artists ? media.Artists : ''}
                         </Text>
                       )}
                     </View>
                     
                     {/* Play Button - Different for MP3 vs Other Media */}
                     <View style={styles.playButtonContainer}>
                       {media.MediaType === 'mp3' ? (
                         // Inline audio controls for MP3
                         <View style={styles.audioControlsInline}>
                           {currentMedia?.avld === media.avld && isLoading ? (
                             <Text style={styles.loadingTextInline}>{getTranslation(translations.loading)}</Text>
                           ) : currentMedia?.avld === media.avld && sound ? (
                             <View style={styles.audioControlsContainer}>
                               {/* Timer Display - Above Audio Controls */}
                               <Text style={styles.elapsedTimeText}>
                                 {formatTime(elapsedTime)}
                               </Text>
                               
                               {/* Main Audio Controls - Middle */}
                               <View style={styles.audioControlsInline}>
                                 <TouchableOpacity
                                   style={styles.audioControlButtonInline}
                                   onPress={rewindAudio}
                                 >
                                   <MaterialCommunityIcons
                                     name="rewind-10"
                                     size={18}
                                     color="#FF6A00"
                                   />
                                 </TouchableOpacity>
                                 
                                 <TouchableOpacity
                                   style={styles.audioControlButtonInline}
                                   onPress={isPlaying ? pauseAudio : playAudio}
                                 >
                                   <MaterialCommunityIcons
                                     name={isPlaying ? 'pause' : 'play'}
                                     size={24}
                                     color="#FF6A00"
                                   />
                                 </TouchableOpacity>
                                 
                                 <TouchableOpacity
                                   style={styles.audioControlButtonInline}
                                   onPress={forwardAudio}
                                 >
                                   <MaterialCommunityIcons
                                     name="fast-forward-10"
                                     size={18}
                                     color="#FF6A00"
                                   />
                                 </TouchableOpacity>
                               </View>
                               
                               {/* Forward/Back Navigation - Below Audio Controls */}
                               <View style={styles.navigationControlsInline}>
                                 <TouchableOpacity
                                   style={styles.navigationButtonInline}
                                   onPress={playPreviousSong}
                                 >
                                   <MaterialCommunityIcons
                                     name="skip-previous"
                                     size={16}
                                     color="#FF6A00"
                                   />
                                 </TouchableOpacity>
                                 
                                 <TouchableOpacity
                                   style={styles.navigationButtonInline}
                                   onPress={playNextSong}
                                 >
                                   <MaterialCommunityIcons
                                     name="skip-next"
                                     size={16}
                                     color="#FF6A00"
                                   />
                                 </TouchableOpacity>
                               </View>
                             </View>
                           ) : (
                             <MaterialCommunityIcons name="play-circle" size={32} color="#FF6A00" />
                           )}
                         </View>
                       ) : (
                         // Regular play button for non-MP3 media
                         <MaterialCommunityIcons name="play-circle" size={32} color="#FF6A00" />
                       )}
                     </View>
                   </TouchableOpacity>
                 );
               });
             })()}
          </>
        )}
      </ScrollView>
      {/* YouTube Modal - Only for YouTube videos */}
      <Modal
        animationType="slide"
        visible={modalVisible && !!currentMedia?.Link && (currentMedia.Link.includes('youtube.com') || currentMedia.Link.includes('youtu.be'))}
        onRequestClose={() => {
          setModalVisible(false);
          setCurrentMedia(null);
          setYoutubePlaying(false);
        }}
      >
        <View style={styles.videoModalBackground}>
          <TouchableOpacity
            onPress={() => {
              setModalVisible(false);
              setCurrentMedia(null);
              setYoutubePlaying(false);
              // Stop and unload audio if playing
              if (sound) {
                sound.unloadAsync();
                setSound(null);
                setIsPlaying(false);
                setIsLoading(false);
              }
            }}
            style={styles.closeButton}
          >
            <MaterialCommunityIcons name="close" size={30} color="#fff" />
          </TouchableOpacity>
          {currentMedia && currentMedia.Link && (
            currentMedia.Link.includes('youtube.com') || currentMedia.Link.includes('youtu.be') ? (
              <YoutubePlayer
                height={300}
                play={youtubePlaying}
                videoId={extractYouTubeId(currentMedia.Link)}
                forceAndroidAutoplay
                webViewProps={{ allowsInlineMediaPlayback: true }}
              />
            ) : currentMedia.MediaType === 'mp3' ? (
              <View style={styles.audioPlayerContainer}>
                <View style={styles.audioInfo}>
                  <MaterialCommunityIcons name="music-note" size={48} color="#FF6A00" />
                  <Text style={styles.audioTitle}>{currentMedia.VideoName}</Text>
                  <Text style={styles.audioDetails}>
                    {currentMedia.Type} | {currentMedia.Language}
                    {currentMedia.Deity ? ` | ${currentMedia.Deity}` : ''}
                  </Text>
                  {currentMedia.Artists && (
                    <Text style={styles.audioArtist}>{getTranslation(translations.by)} {currentMedia.Artists}</Text>
                  )}
                </View>
                
                <View style={styles.audioControls}>
                  {isLoading ? (
                    <Text style={styles.loadingText}>{getTranslation(translations.loadingAudio)}</Text>
                  ) : (
                    <>
                      <TouchableOpacity
                        style={styles.audioControlButton}
                        onPress={isPlaying ? pauseAudio : playAudio}
                      >
                        <MaterialCommunityIcons
                          name={isPlaying ? 'pause' : 'play'}
                          size={32}
                          color="#FF6A00"
                        />
                      </TouchableOpacity>
                      
                      <TouchableOpacity
                        style={styles.audioControlButton}
                        onPress={stopAudio}
                      >
                        <MaterialCommunityIcons
                          name="stop"
                          size={32}
                          color="#FF6A00"
                        />
                      </TouchableOpacity>
                    </>
                  )}
                </View>
              </View>
            ) : (
              <Text style={{ color: '#fff', textAlign: 'center', marginTop: 100 }}>{getTranslation(translations.unsupportedMedia)}</Text>
            )
          )}
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff' },
  // Deity Icons Styles
  deityIconsContainer: {
    position: 'absolute',
    top: 170, // Moved up 10px from 180 to 170
    left: 0,
    right: 0,
    zIndex: 10,
    backgroundColor: 'transparent',
  },
  deityIconsContent: {
    paddingHorizontal: 20,
    alignItems: 'center',
  },
  deityIconItem: {
    alignItems: 'center',
    marginHorizontal: 8,
    padding: 8,
    borderRadius: 8,
    backgroundColor: 'transparent',
    borderWidth: 0,
    minWidth: 60,
    minHeight: 60,
  },
  deityIconImage: {
    width: 40,
    height: 40,
    marginBottom: 4,
  },
  deityIconLabel: {
    fontSize: 8,
    color: '#fff',
    fontWeight: '500',
    textAlign: 'center',
  },
  deityIconItemSelected: {
    backgroundColor: 'rgba(255, 106, 0, 0.3)',
    borderWidth: 2,
    borderColor: '#FF6A00',
  },
  filterStatusContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: 'rgba(255, 106, 0, 0.1)',
    paddingHorizontal: 15,
    paddingVertical: 8,
    marginHorizontal: 20,
    marginTop: 10,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: 'rgba(255, 106, 0, 0.3)',
  },
  filterStatusText: {
    fontSize: 12,
    color: '#FF6A00',
    fontWeight: '500',
  },
  clearFilterButton: {
    backgroundColor: '#FF6A00',
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 4,
  },
  clearFilterText: {
    fontSize: 10,
    color: '#fff',
    fontWeight: 'bold',
  },
  filterButtonsContainer: {
    marginVertical: 15,
    paddingHorizontal: 20,
  },
  filterButtonsContent: {
    paddingHorizontal: 10,
  },
  filterButton: {
    backgroundColor: '#f5f5f5',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    marginHorizontal: 6,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  filterButtonActive: {
    backgroundColor: '#FF6A00',
    borderColor: '#FF6A00',
  },
  filterButtonText: {
    fontSize: 12,
    color: '#666',
    fontWeight: '500',
  },
  filterButtonTextActive: {
    color: '#fff',
    fontWeight: '600',
  },
  stopMusicButton: {
    marginTop: 0,
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 8,
    borderWidth: 2,
    alignItems: 'center',
    justifyContent: 'center',
    minWidth: 120,
    alignSelf: 'center',
  },
  stopMusicButtonActive: {
    backgroundColor: '#FF6A00',
    borderColor: '#FF6A00',
  },
  stopMusicButtonDisabled: {
    backgroundColor: '#f0f0f0',
    borderColor: '#ddd',
  },
  stopMusicButtonText: {
    fontSize: 14,
    fontWeight: '600',
  },
  stopMusicButtonTextActive: {
    color: 'white',
  },
  stopMusicButtonTextDisabled: {
    color: '#999',
  },
  header: {
    backgroundColor: '#fff',
    paddingTop: 50,
    paddingBottom: 15,
    paddingHorizontal: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  topContent: {
    backgroundColor: '#fff',
    paddingBottom: 0,
    paddingTop: 0,
  },
  filterContainer: {
    marginBottom: 20,
    marginTop: -10, // Moved up 10px
    position: 'relative',
    width: '88%',
    alignSelf: 'center',
  },
  searchInputContainer: {
    position: 'relative',
    marginBottom: 16,
  },
  searchInput: {
    backgroundColor: '#fff',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    paddingHorizontal: 16,
    paddingVertical: 12,
    paddingRight: 40,
    fontSize: 14,
    color: '#333',
  },
  searchIcon: {
    position: 'absolute',
    right: 12,
    top: 12,
  },
  filterRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    width: '100%',
  },
  toggleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 20,
  },
  toggleItem: {
    alignItems: 'center',
  },
  toggleTrack: {
    width: 40,
    height: 20,
    borderRadius: 10,
    justifyContent: 'center',
    alignItems: 'center',
    position: 'relative',
  },
  toggleThumb: {
    width: 18,
    height: 18,
    borderRadius: 9,
    backgroundColor: '#fff',
    position: 'absolute',
    left: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
    elevation: 2,
  },
  toggleThumbActive: {
    left: 21,
  },
  toggleLabel: {
    marginTop: 6,
    fontSize: 14,
    fontWeight: '500',
    color: '#fff',
  },

  content: {
    padding: 15,
  },
  sectionHeader: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 10,
  },
  videoModalBackground: {
    flex: 1,
    backgroundColor: 'black',
  },
  closeButton: {
    position: 'absolute',
    top: 40,
    right: 20,
    zIndex: 1,
  },
  // Media Tile Styles
  mediaTile: {
    marginBottom: 12,
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 12,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    flexDirection: 'row',
    alignItems: 'center',
  },
  audioTile: {
    borderLeftWidth: 4,
    borderLeftColor: '#4CAF50',
  },
  videoTile: {
    borderLeftWidth: 4,
    borderLeftColor: '#2196F3',
  },
  mediaIconContainer: {
    width: 70,
    height: 70,
    borderRadius: 10,
    backgroundColor: '#f8f9fa',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
    padding: 6,
  },
  mediaIconType: {
    fontSize: 11,
    color: '#FF6A00',
    fontWeight: '600',
    textAlign: 'center',
    marginTop: 3,
  },
  mediaIconLanguage: {
    fontSize: 9,
    color: '#666',
    textAlign: 'center',
    marginTop: 1,
  },
  mediaContent: {
    flex: 1,
  },
  mediaTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  mediaType: {
    fontSize: 12,
    color: '#666',
    marginBottom: 2,
  },
  mediaDetails: {
    fontSize: 10,
    color: '#888',
  },
  playButtonContainer: {
    marginLeft: 16,
  },
  // Audio Player Styles
  audioPlayerContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 20,
  },
  audioInfo: {
    alignItems: 'center',
    marginBottom: 40,
  },
  audioTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#fff',
    textAlign: 'center',
    marginTop: 20,
    marginBottom: 10,
  },
  audioDetails: {
    fontSize: 16,
    color: '#ccc',
    textAlign: 'center',
    marginBottom: 8,
  },
  audioArtist: {
    fontSize: 18,
    color: '#FF6A00',
    textAlign: 'center',
    fontWeight: '600',
  },
  audioControls: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 30,
  },
  audioControlButton: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#FF6A00',
  },
  loadingText: {
    fontSize: 18,
    color: '#fff',
    textAlign: 'center',
  },
  // Inline Audio Controls Styles
  audioControlsInline: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
    justifyContent: 'center',
  },
  audioControlButtonInline: {
    width: 28,
    height: 28,
    borderRadius: 14,
    backgroundColor: 'rgba(255, 106, 0, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#FF6A00',
  },
  loadingTextInline: {
    fontSize: 12,
    color: '#FF6A00',
    textAlign: 'center',
    fontStyle: 'italic',
  },
  // Additional inline audio styles
  elapsedTimeText: {
    fontSize: 8,
    color: '#FF6A00',
    textAlign: 'center',
    fontWeight: '600',
    marginBottom: 4,
  },
  navigationControlsInline: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    justifyContent: 'center',
    marginTop: 4,
  },
  navigationButtonInline: {
    width: 24,
    height: 24,
    borderRadius: 12,
    backgroundColor: 'rgba(255, 106, 0, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#FF6A00',
  },
  audioControlsContainer: {
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 4,
  },
}); 